AWSTemplateFormatVersion: "2010-09-09"
Description: Company Data Management
Resources:
  # Roles
  SpectrumRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SpectrumRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess

  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole

  LambdaRoleGlue:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRoleGlue
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess

  # Lambda function to start Glue
  GlueInitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          def lambda_handler(event, context):
              bucketName = event["Records"][0]["s3"]["bucket"]["name"]
              fileName = event["Records"][0]["s3"]["object"]["key"]

              print(bucketName, fileName)

              glue = boto3.client('glue')

              response = glue.start_job_run(
                  JobName='parquet2avro',
                  Arguments={
                      '--s3_key': fileName,
                      '--s3_bucket': bucketName
                  }
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('parquet2avro triggered')
              }
      FunctionName: S32GlueStarter
      Handler: index.lambda_handler
      Role: !GetAtt "LambdaRoleGlue.Arn"
      Runtime: python3.7
      Timeout: 60


  # Buckets
  CompanyDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - company-data
          - !Ref "AWS::AccountId"
  CompanyBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - company-backup
          - !Ref "AWS::AccountId"
  GlueScriptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - company-glue-scripts
          - !Ref "AWS::AccountId"

  # Smallest possible Redshift cluster, and role needed to utilize Redshift Spectrum
  CompanyCluster:
    Type: "AWS::Redshift::Cluster"
    Properties:
      ClusterIdentifier: "company-cluster"
      DBName: "company"
      MasterUsername: "dataeng"
      MasterUserPassword: Strongpass1
      NodeType: "dc2.large"
      ClusterType: "single-node"
      IamRoles:
        - !GetAtt "SpectrumRole.Arn"

# Lambda to upload Data
  UploadDataScript:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import re
          import cfnresponse
          def download_file():
              urls = ['https://raw.githubusercontent.com/rcamilo1526/fast-api-data/main/data/departments.csv',
                      'https://raw.githubusercontent.com/rcamilo1526/fast-api-data/main/data/jobs.csv',
                      'https://raw.githubusercontent.com/rcamilo1526/fast-api-data/main/data/hired_employees.csv']
              for url in urls:
                  file_content = requests.get(url).content
                  sts = boto3.client("sts")
                  account_id = sts.get_caller_identity()["Account"]
                  client = boto3.client('s3')
                  data_key = re.search('.*\/+(.*)', url).group(1)
                  client.put_object(Body=file_content, Bucket=f'company-data-{account_id}', Key=f'data/{data_key}')

          def lambda_handler(event, context):
              print(f'Received event: {json.dumps(event)}')
              responseData = {}
              try:
                  download_file()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      FunctionName: DownloadData2S3
      Description: Invoke a function to get gluescript.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRoleGlue.Arn
      Runtime: python3.7
      Timeout: 60

  UploadData:
    Type: Custom::UploadDataScript
    Properties:
      ServiceToken: !GetAtt "UploadDataScript.Arn"
    DependsOn:
      - UploadDataScript
      - CompanyDataBucket

# Lambda Function to upload glue script
  UploadScriptGlueFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import cfnresponse
          def download_file():
              url = 'https://raw.githubusercontent.com/rcamilo1526/fast-api-data/main/aws/glue/parquet2avro.py'
              file_content = requests.get(url).content
              sts = boto3.client("sts")
              account_id = sts.get_caller_identity()["Account"]
              client = boto3.client('s3')
              client.put_object(Body=file_content, Bucket=f'company-glue-scripts-{account_id}', Key='parquet2avro.py')

          def lambda_handler(event, context):
              print(f'Received event: {json.dumps(event)}')
              responseData = {}
              try:
                  download_file()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              
      FunctionName: GetParquet2AvroFile
      Description: Invoke a function to get gluescript.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRoleGlue.Arn
      Runtime: python3.7
      Timeout: 60

  UploadScriptGlue:
    Type: Custom::UploadScriptGlueFunction
    Properties:
      ServiceToken: !GetAtt 'UploadScriptGlueFunction.Arn'
    DependsOn:
      - UploadScriptGlueFunction
      - GlueScriptBucket
